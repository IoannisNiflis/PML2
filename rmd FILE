---
title: "Practical Machine Learning Course Assignment Writeup"
author: "Yiannis Niflis"
date: "27 / 02 / 2016"
output: html_document
---



The training data for this project are available here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv

The test data are available here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv

Import caret package and read the files and import them in your working directory, also replace all missing values with NA (in order to delete them later):

```{r}
library(caret)
library(randomForest)
library(e1071)
library(rpart) # Regressive Partitioning and Regression trees
library(rpart.plot) # Decision Tree plot

url1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url1, destfile="pmltraining.csv")
url2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url2, destfile="pmltesting.csv")
training_raw <- read.csv("pmltraining.csv", header=TRUE, na.strings=c("NA","#DIV/0!", ""))
testing_raw <- read.csv("pmltesting.csv", header=TRUE, na.strings=c("NA","#DIV/0!", ""))

```

I keep those variables which are related to sensors (e.g. belt, arm, dumbbell, forearm) and the classe variable as it holds the classification of the activity performed by the user.

Also I discard the variables which have only null values and irrelevant variables with our project.
```{r}
sensor_col <- grepl("belt|arm|dumbbell|forearm|classe",names(training_raw))
training_set <- training_raw[,sensor_col]
null_col <- colSums(is.na(training_set))!=0
training_set <- training_set[,!null_col]
training_set   <-training_set[,-c(1:7)]

```

Creating Scaterplots to check relationships between variables


```{r}

pairs(training_set[1:10000,1:10])


```

Split of the original training set into two subsets (train 80% and testing 20%) and then use the Random Forest Method to boost Accuracy of the Model

```{r}

set.seed(1234)
training_cv_index <- createDataPartition(training_set$classe,list=FALSE ,p=0.8)
training_cv <- training_set[training_cv_index,]
validation_cv <- training_set[-training_cv_index,]

```

Creating a Prediction model using desicion trees
```{r}


model <- rpart(classe ~ ., data=training_cv, method="class")

# Predicting:
prediction1 <- predict(model, validation_cv, type = "class")

# Plot of the Decision Tree
rpart.plot(model, main="Classification Tree", extra=102, under=TRUE, faclen=0)

```

see the results of the model

```{r}

model


```

Model Validation

```{r}

confusionMatrix(prediction1, validation_cv$classe)

```


predict model values

```{r}
resultfull <-predict(model,testing_raw)
result <-predict(model,testing_raw,type ="class")
resultfull
result

```


